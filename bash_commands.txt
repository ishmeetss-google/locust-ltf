--- provided by the customer: start ---

export PROJECT_ID="email2podcast"
export REGION="us-central1"
export ZONE="us-central1-a"
export FILENAME="/tasks/public_http_query.py"

! All the required variables in the terraform infrastructure.
! Need to get the dimension for the vector search index. So that we can pass that number to the locust script before creating the docker image.

--- provided by the customer: start ---

export PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")

gcloud services list

gcloud services enable aiplatform.googleapis.com \
 artifactregistry.googleapis.com \
 compute.googleapis.com \
 autoscaling.googleapis.com \
 container.googleapis.com \
 iamcredentials.googleapis.com \
 cloudbuild.googleapis.com \
 iam.googleapis.com

gcloud artifacts repositories create locust-docker-repo --repository-format=docker --location=${REGION} --project=${PROJECT_ID}

export DOCKER_IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/locust-docker-repo/locust-image:LTF"

gcloud builds submit --project=${PROJECT_ID} --tag ${DOCKER_IMAGE}

cd terraform

---
Since index is already deployed adding the setting the value of following variables in 
terraform.tfvars file.
vector_search_index_id            = "projects/email2podcast/locations/us-central1/indexes/4489662217976807424
"
---

terraform init

terraform plan

terraform apply

gcloud container clusters get-credentials ltf-autopilot-cluster --project=${PROJECT_ID} --location=${REGION}

export INTERNAL_LB_IP=$(kubectl get svc locust-master-web -o jsonpath="{.status.loadBalancer.ingress[0].ip}")

gcloud compute instances create-with-container ltf-nginx-proxy \
  --project ${PROJECT_ID} \
  --zone ${ZONE} \
  --container-image gcr.io/cloud-marketplace/google/nginx1:latest \
  --container-mount-host-path=host-path=/tmp/server.conf,mount-path=/etc/nginx/conf.d/default.conf \
  --metadata=startup-script="#! /bin/bash
    cat <<EOF  > /tmp/server.conf
    server {
        listen 8089;
        location / {
            proxy_pass http://${INTERNAL_LB_IP}:8089;
        }
    }
EOF"

gcloud compute ssh ltf-nginx-proxy --project ${PROJECT_ID} --zone ${ZONE} -- -NL 8089:localhost:8089

